# 	$Id: parsenode.lefty,v 1.1 2009/05/24 14:27:11 hidaka Exp $	
load('string.lefty');

exmarks = function(s) {
    local r,i,n,r0;
    r = split(s,'{');
    r = split(r[1],'}');
    r = split(r[0],';');
    n = tablesize(r);
    for (i = 0; i < n; i = i + 1) {
	r0 = split(r[i],' ');
	r[i] = r0[0];
    }
    return r;
};

parsenode = function (s) {
    local ns, r, n, r0;
    ns = [ 'imarks' = []; 'omarks' = []; 'label'  =  "";];
    r = split_mc(s,"\n");
    #echo("r=",r);
    n=tablesize(r);
    # echo("tablesize=",n);

    if (n == 1) {
	ns.label = r[0];
    } else if (n == 2) {
	if (kmp_search(r[0],"{") == 0) {
	    ns.imarks = exmarks(r[0]);
	    ns.label = r[1];
	} else {
	    ns.label = r[0];
	    ns.omarks = exmarks(r[1]);
	}
    } else if (n == 3) {
	ns.imarks = exmarks(r[0]);
	ns.label = r[1];
	ns.omarks = exmarks(r[2]);
    } else {
	echo("parsenode: malformed node label ",s);
        return;
    }
    return ns;
};

packnode = function (node) {
    local imark_s, omark_s;
    imark_s = unsplit_mc(node.imarks,"; ");
    omark_s = unsplit_mc(node.omarks,"; ");
    if (imark_s ~= "") imark_s = concat("{",imark_s,"}\n");
    if (omark_s ~= "") omark_s = concat("\n{",omark_s,"}");
    return concat(imark_s,node.label,omark_s);
};
pack_recnode = function (node) {
    local imark_s, omark_s;
    imark_s = unsplit_mc(node.imarks,"; ");
    omark_s = unsplit_mc(node.omarks,"; ");
    return concat("{",imark_s,"|",node.label,"|",omark_s,"}");
};

parse_recnode = function (s) {
    local ns, r, n, imarks_s, omarks_s;
    ns = [ 'imarks' = []; 'omarks' = []; 'label'  =  "";];
    r = parsegraphlabel(s,null);
    imarks_s = r[0].fields[0].text;
    ns.label = r[0].fields[1].text;
    omarks_s = r[0].fields[2].text;
    if (~is_whitespace(imarks_s)) 
	ns.imarks = exmarks(concat("{",imarks_s,"}"));
    if (~is_whitespace(omarks_s)) 
	ns.omarks = exmarks(concat("{",omarks_s,"}"));
    return ns;
};

######################## TESTCODE ###########################
#ss = "{&z1; &z2}\n3\n{&4}";
#ss = "{&zn1; &n2}\n3\n{&n4}";
#ss = "{&zn1; &n2}\n3";
#ss = "3\n{&zn1; &n2}";
#ss = "{|\N|&z2; &z3}";
#obj = parsenode(ss);
#obj = parse_recnode(ss);
#echo(obj);
#echo(packnode(obj));
#echo(pack_recnode(obj));
#echo(ss);
