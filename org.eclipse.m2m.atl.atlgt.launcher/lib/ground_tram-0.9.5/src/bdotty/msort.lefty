# merge sort

# convert an association list to array
ms_to_array = function(tbl) {
    local i,t,obj;
    i = 0;
    for (obj in tbl) {
      # echo("obj=",tbl[obj]);
      t[i]=tbl[obj];
      i=i+1;
    }
    return t;
};

# comparison function
ms_cmp = function (x,y) {
  if (x < y) {
   return -1;
  } else if (x == y){
   return 0;
  } else {
   return 1;
 }
};

# merge tables tbl1 and tbl2 in terms of attribute keyattr
# comparison function
ms_merge = function (tbl1,tbl2, keyattr, cmp) {
  local tbl, i1,i2, l1,l2,i,n;
  i1=0;
  i2=0;
  l1 = tablesize(tbl1);
  l2 = tablesize(tbl2);
  n = l1+l2;
  for (i=0;i<n;i=i+1) {
    if (i1 >= l1) {
      # tbl1 is already consumed so copy from tbl2
      tbl[i]=tbl2[i2];
      i2=i2+1;
    } else if (i2 >= l2) {
      # tbl2 is already consumed so copy from tbl1
      tbl[i]=tbl1[i1];
      i1=i1+1;
    } else {
       if (cmp(tbl1[i1][keyattr],tbl2[i2][keyattr]) < 0) {
         tbl[i]=tbl1[i1];
         i1=i1+1;
       } else {
         tbl[i]=tbl2[i2];
         i2=i2+1;
       }
    }
  }
  return tbl;
};

#
# sort table tbl by key attribute keyattr with comparison
# function cmp
# 
ms_msort = function (tbl,keyattr,cmp) {
  local i,i1,i2,n,n1,n2,t1,t2,tt1,tt2,result;
  n = tablesize(tbl);
  if (n > 1) {
     n1 = n / 2;
     n2 = n - n1;
     # split table
     for (i1=0;i1<n1;i1=i1+1) {
       t1[i1]=tbl[i1];
     }
     i = i1;
     for (i2=0;i2<n2;i2=i2+1) {
       t2[i2]=tbl[i];
       i=i+1;
     }
     tt1=ms_msort(t1,keyattr,cmp);
     tt2=ms_msort(t2,keyattr,cmp);
     result = ms_merge(tt1,tt2,keyattr,cmp);
     return result;
  } else {
    return tbl;
  }

};

# test codes
ms_misc_test = function () {
    local t1,t2,t3;
    local tt1,tt2;
    t1[0]= ["eid" = 4;];
    t1[3]= ["eid" = 3;];
    t1[4]= ["eid" = 6;];
    t2[2]= ["eid" = 1;];
    t2[6]= ["eid" = 2;];
    tt1=ms_to_array(t1);
    tt2=ms_to_array(t2);
    
    echo("ms_cmp(1,2)=",ms_cmp(1,2));
    t3=ms_msort(tt1,"eid",ms_cmp);
    dump(t3);
    return;
}