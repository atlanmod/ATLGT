// automatically generated by Xtext
grammar org.eclipse.m2m.km3.xtext.KM3 with org.eclipse.xtext.common.Terminals

import "http://example.org/prim" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://example.org/km3" as KM3

Metamodel returns KM3::Metamodel:
	'Metamodel'
	'{'
		'location' location=String0
		('contents' '(' contents+=[KM3::Package|STRING] ( "," contents+=[KM3::Package|STRING])* ')' )?
	'}';

ModelElement returns KM3::ModelElement:
	Classifier_Impl | DataType | Enumeration | EnumLiteral | TemplateParameter | Class | TypedElement_Impl | StructuralFeature_Impl | Attribute | Reference | Operation | Parameter | Package;


StructuralFeature returns KM3::StructuralFeature:
	StructuralFeature_Impl | Attribute | Reference;


Classifier returns KM3::Classifier:
	Classifier_Impl | DataType | Enumeration | TemplateParameter | Class;

String0 returns String:
	'String' /* TODO: implement this rule and an appropriate IValueConverter */;

Package returns KM3::Package:
	'Package'
	'{'
		'location' location=String0
		'name' name=String0
		'metamodel' metamodel=[KM3::Metamodel|STRING]
		('contents' '{' contents+=ModelElement ( "," contents+=ModelElement)* '}' )?
	'}';

Classifier_Impl returns KM3::Classifier:
	'Classifier'
	'{'
		'location' location=String0
		'name' name=String0
	'}';

DataType returns KM3::DataType:
	'DataType'
	'{'
		'location' location=String0
		'name' name=String0
	'}';

Enumeration returns KM3::Enumeration:
	'Enumeration'
	'{'
		'location' location=String0
		'name' name=String0
		('literals' '(' literals+=[KM3::EnumLiteral|STRING] ( "," literals+=[KM3::EnumLiteral|STRING])* ')' )?
	'}';

EnumLiteral returns KM3::EnumLiteral:
	'EnumLiteral'
	'{'
		'location' location=String0
		'name' name=String0
		'enum' ^enum=[KM3::Enumeration|STRING]
	'}';

TemplateParameter returns KM3::TemplateParameter:
	'TemplateParameter'
	'{'
		'location' location=String0
		'name' name=String0
	'}';

Class returns KM3::Class:
	'Class'
	'{'
		'location' location=String0
		'name' name=String0
		'isAbstract' isAbstract=Boolean
		('parameters' '(' parameters+=[KM3::TemplateParameter|STRING] ( "," parameters+=[KM3::TemplateParameter|STRING])* ')' )?
		('supertypes' '(' supertypes+=[KM3::Class|STRING] ( "," supertypes+=[KM3::Class|STRING])* ')' )?
		('structuralFeatures' '(' structuralFeatures+=[KM3::StructuralFeature|STRING] ( "," structuralFeatures+=[KM3::StructuralFeature|STRING])* ')' )?
		('operations' '(' operations+=[KM3::Operation|STRING] ( "," operations+=[KM3::Operation|STRING])* ')' )?
	'}';

TypedElement_Impl returns KM3::TypedElement:
	'TypedElement'
	'{'
		'location' location=String0
		'name' name=String0
		'lower' lower=Integer
		'upper' upper=Integer
		'isOrdered' isOrdered=Boolean
		'isUnique' isUnique=Boolean
		'type' type=[KM3::Classifier|STRING]
	'}';

StructuralFeature_Impl returns KM3::StructuralFeature:
	'StructuralFeature'
	'{'
		'location' location=String0
		'name' name=String0
		'lower' lower=Integer
		'upper' upper=Integer
		'isOrdered' isOrdered=Boolean
		'isUnique' isUnique=Boolean
		'type' type=[KM3::Classifier|STRING]
		'owner' owner=[KM3::Class|STRING]
		('subsetOf' '(' subsetOf+=[KM3::StructuralFeature|STRING] ( "," subsetOf+=[KM3::StructuralFeature|STRING])* ')' )?
		('derivedFrom' '(' derivedFrom+=[KM3::StructuralFeature|STRING] ( "," derivedFrom+=[KM3::StructuralFeature|STRING])* ')' )?
	'}';

Attribute returns KM3::Attribute:
	'Attribute'
	'{'
		'location' location=String0
		'name' name=String0
		'lower' lower=Integer
		'upper' upper=Integer
		'isOrdered' isOrdered=Boolean
		'isUnique' isUnique=Boolean
		'type' type=[KM3::Classifier|STRING]
		'owner' owner=[KM3::Class|STRING]
		('subsetOf' '(' subsetOf+=[KM3::StructuralFeature|STRING] ( "," subsetOf+=[KM3::StructuralFeature|STRING])* ')' )?
		('derivedFrom' '(' derivedFrom+=[KM3::StructuralFeature|STRING] ( "," derivedFrom+=[KM3::StructuralFeature|STRING])* ')' )?
	'}';

Reference returns KM3::Reference:
	'Reference'
	'{'
		'location' location=String0
		'name' name=String0
		'lower' lower=Integer
		'upper' upper=Integer
		'isOrdered' isOrdered=Boolean
		'isUnique' isUnique=Boolean
		'isContainer' isContainer=Boolean
		'type' type=[KM3::Classifier|STRING]
		'owner' owner=[KM3::Class|STRING]
		('subsetOf' '(' subsetOf+=[KM3::StructuralFeature|STRING] ( "," subsetOf+=[KM3::StructuralFeature|STRING])* ')' )?
		('derivedFrom' '(' derivedFrom+=[KM3::StructuralFeature|STRING] ( "," derivedFrom+=[KM3::StructuralFeature|STRING])* ')' )?
		('opposite' opposite=[KM3::Reference|STRING])?
	'}';

Operation returns KM3::Operation:
	'Operation'
	'{'
		'location' location=String0
		'name' name=String0
		'lower' lower=Integer
		'upper' upper=Integer
		'isOrdered' isOrdered=Boolean
		'isUnique' isUnique=Boolean
		'type' type=[KM3::Classifier|STRING]
		'owner' owner=[KM3::Class|STRING]
		('parameters' '(' parameters+=[KM3::Parameter|STRING] ( "," parameters+=[KM3::Parameter|STRING])* ')' )?
	'}';

Parameter returns KM3::Parameter:
	'Parameter'
	'{'
		'location' location=String0
		'name' name=String0
		'lower' lower=Integer
		'upper' upper=Integer
		'isOrdered' isOrdered=Boolean
		'isUnique' isUnique=Boolean
		'type' type=[KM3::Classifier|STRING]
		'owner' owner=[KM3::Operation|STRING]
	'}';

Boolean returns Boolean:
	'Boolean' /* TODO: implement this rule and an appropriate IValueConverter */;

Integer returns Integer:
	'Integer' /* TODO: implement this rule and an appropriate IValueConverter */;
