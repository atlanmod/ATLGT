/**
 * generated by Xtext 2.10.0
 */
package org.eclipse.m2m.km3.xtext.scoping;

import com.google.common.base.Objects;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.m2m.km3.Classifier;
import org.eclipse.m2m.km3.Km3Package;
import org.eclipse.m2m.km3.Reference;
import org.eclipse.m2m.km3.StructuralFeature;
import org.eclipse.m2m.km3.xtext.scoping.AbstractKM3ScopeProvider;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class KM3ScopeProvider extends AbstractKM3ScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if (((context instanceof StructuralFeature) && Objects.equal(reference, Km3Package.Literals.TYPED_ELEMENT__TYPE))) {
      final EObject rootElement = EcoreUtil2.getRootContainer(context);
      final List<Classifier> candidates = EcoreUtil2.<Classifier>getAllContentsOfType(rootElement, Classifier.class);
      return Scopes.scopeFor(candidates);
    }
    if (((context instanceof Reference) && Objects.equal(reference, Km3Package.Literals.REFERENCE__OPPOSITE))) {
      Classifier _type = ((Reference) context).getType();
      final List<Reference> candidates_1 = EcoreUtil2.<Reference>getAllContentsOfType(_type, Reference.class);
      return Scopes.scopeFor(candidates_1);
    }
    return super.getScope(context, reference);
  }
}
