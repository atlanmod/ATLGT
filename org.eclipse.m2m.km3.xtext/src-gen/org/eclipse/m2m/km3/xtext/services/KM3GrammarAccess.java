/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.m2m.km3.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KM3GrammarAccess extends AbstractGrammarElementFinder {
	
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.m2m.km3.xtext.KM3.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentsModelElementParserRuleCall_3_0 = (RuleCall)cContentsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////Metamodel:
		////	{Metamodel} (contents+=Package)*;
		//Package:
		//	'package' name=ID
		//	'{'
		//	contents+=ModelElement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=ID '{' contents+=ModelElement* '}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//contents+=ModelElement*
		public Assignment getContentsAssignment_3() { return cContentsAssignment_3; }
		
		//ModelElement
		public RuleCall getContentsModelElementParserRuleCall_3_0() { return cContentsModelElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.m2m.km3.xtext.KM3.ModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ModelElement:
		//	DataType | Class
		//	//	Classifier_Impl | Enumeration | EnumLiteral | TemplateParameter | TypedElement_Impl | StructuralFeature_Impl | Attribute | Reference | Operation | Parameter | Package;
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//DataType | Class
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_0() { return cDataTypeParserRuleCall_0; }
		
		//Class
		public RuleCall getClassParserRuleCall_1() { return cClassParserRuleCall_1; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.m2m.km3.xtext.KM3.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DataType:
		//	'datatype' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'datatype' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class StructuralFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.m2m.km3.xtext.KM3.StructuralFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StructuralFeature:
		//	Attribute | Reference
		//	//	StructuralFeature_Impl;
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Attribute | Reference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }
		
		//Reference
		public RuleCall getReferenceParserRuleCall_1() { return cReferenceParserRuleCall_1; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.m2m.km3.xtext.KM3.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSupertypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSupertypesClassCrossReference_3_1_0 = (CrossReference)cSupertypesAssignment_3_1.eContents().get(0);
		private final RuleCall cSupertypesClassIDTerminalRuleCall_3_1_0_1 = (RuleCall)cSupertypesClassCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cSupertypesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cSupertypesClassCrossReference_3_2_1_0 = (CrossReference)cSupertypesAssignment_3_2_1.eContents().get(0);
		private final RuleCall cSupertypesClassIDTerminalRuleCall_3_2_1_0_1 = (RuleCall)cSupertypesClassCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStructuralFeaturesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStructuralFeaturesStructuralFeatureParserRuleCall_5_0 = (RuleCall)cStructuralFeaturesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Class:
		//	isAbstract?='abstract'?
		//	'class' name=ID ('extends' supertypes+=[Class] ("," supertypes+=[Class])*)?
		//	'{' structuralFeatures+=StructuralFeature*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'class' name=ID ('extends' supertypes+=[Class] ("," supertypes+=[Class])*)? '{'
		//structuralFeatures+=StructuralFeature* '}'
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('extends' supertypes+=[Class] ("," supertypes+=[Class])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//supertypes+=[Class]
		public Assignment getSupertypesAssignment_3_1() { return cSupertypesAssignment_3_1; }
		
		//[Class]
		public CrossReference getSupertypesClassCrossReference_3_1_0() { return cSupertypesClassCrossReference_3_1_0; }
		
		//ID
		public RuleCall getSupertypesClassIDTerminalRuleCall_3_1_0_1() { return cSupertypesClassIDTerminalRuleCall_3_1_0_1; }
		
		//("," supertypes+=[Class])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//supertypes+=[Class]
		public Assignment getSupertypesAssignment_3_2_1() { return cSupertypesAssignment_3_2_1; }
		
		//[Class]
		public CrossReference getSupertypesClassCrossReference_3_2_1_0() { return cSupertypesClassCrossReference_3_2_1_0; }
		
		//ID
		public RuleCall getSupertypesClassIDTerminalRuleCall_3_2_1_0_1() { return cSupertypesClassIDTerminalRuleCall_3_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//structuralFeatures+=StructuralFeature*
		public Assignment getStructuralFeaturesAssignment_5() { return cStructuralFeaturesAssignment_5; }
		
		//StructuralFeature
		public RuleCall getStructuralFeaturesStructuralFeatureParserRuleCall_5_0() { return cStructuralFeaturesStructuralFeatureParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.m2m.km3.xtext.KM3.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsUniqueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsUniqueUniqueKeyword_0_0 = (Keyword)cIsUniqueAssignment_0.eContents().get(0);
		private final Keyword cAttributeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cLowerAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cLowerElementBoundParserRuleCall_3_1_0_0 = (RuleCall)cLowerAssignment_3_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cUpperAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cUpperElementBoundParserRuleCall_3_2_0 = (RuleCall)cUpperAssignment_3_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cIsOrderedAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cIsOrderedOrderedKeyword_4_0 = (Keyword)cIsOrderedAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTypeClassifierCrossReference_6_0 = (CrossReference)cTypeAssignment_6.eContents().get(0);
		private final RuleCall cTypeClassifierIDTerminalRuleCall_6_0_1 = (RuleCall)cTypeClassifierCrossReference_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Attribute:
		//	isUnique?='unique'?
		//	'attribute' name=ID ('[' (lower=ElementBound '-')? upper=ElementBound ']')?
		//	isOrdered?='ordered'?
		//	':' type=[Classifier]
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//isUnique?='unique'? 'attribute' name=ID ('[' (lower=ElementBound '-')? upper=ElementBound ']')? isOrdered?='ordered'?
		//':' type=[Classifier] ';'
		public Group getGroup() { return cGroup; }
		
		//isUnique?='unique'?
		public Assignment getIsUniqueAssignment_0() { return cIsUniqueAssignment_0; }
		
		//'unique'
		public Keyword getIsUniqueUniqueKeyword_0_0() { return cIsUniqueUniqueKeyword_0_0; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1() { return cAttributeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('[' (lower=ElementBound '-')? upper=ElementBound ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//(lower=ElementBound '-')?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//lower=ElementBound
		public Assignment getLowerAssignment_3_1_0() { return cLowerAssignment_3_1_0; }
		
		//ElementBound
		public RuleCall getLowerElementBoundParserRuleCall_3_1_0_0() { return cLowerElementBoundParserRuleCall_3_1_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3_1_1() { return cHyphenMinusKeyword_3_1_1; }
		
		//upper=ElementBound
		public Assignment getUpperAssignment_3_2() { return cUpperAssignment_3_2; }
		
		//ElementBound
		public RuleCall getUpperElementBoundParserRuleCall_3_2_0() { return cUpperElementBoundParserRuleCall_3_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
		
		//isOrdered?='ordered'?
		public Assignment getIsOrderedAssignment_4() { return cIsOrderedAssignment_4; }
		
		//'ordered'
		public Keyword getIsOrderedOrderedKeyword_4_0() { return cIsOrderedOrderedKeyword_4_0; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//type=[Classifier]
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }
		
		//[Classifier]
		public CrossReference getTypeClassifierCrossReference_6_0() { return cTypeClassifierCrossReference_6_0; }
		
		//ID
		public RuleCall getTypeClassifierIDTerminalRuleCall_6_0_1() { return cTypeClassifierIDTerminalRuleCall_6_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.m2m.km3.xtext.KM3.Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReferenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cLowerAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cLowerElementBoundParserRuleCall_2_1_0_0 = (RuleCall)cLowerAssignment_2_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cUpperAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cUpperElementBoundParserRuleCall_2_2_0 = (RuleCall)cUpperAssignment_2_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cIsOrderedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIsOrderedOrderedKeyword_3_0 = (Keyword)cIsOrderedAssignment_3.eContents().get(0);
		private final Assignment cIsContainerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cIsContainerContainerKeyword_4_0 = (Keyword)cIsContainerAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTypeClassifierCrossReference_6_0 = (CrossReference)cTypeAssignment_6.eContents().get(0);
		private final RuleCall cTypeClassifierIDTerminalRuleCall_6_0_1 = (RuleCall)cTypeClassifierCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cOppositeOfKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cOppositeAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cOppositeReferenceCrossReference_7_1_0 = (CrossReference)cOppositeAssignment_7_1.eContents().get(0);
		private final RuleCall cOppositeReferenceIDTerminalRuleCall_7_1_0_1 = (RuleCall)cOppositeReferenceCrossReference_7_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Reference:
		//	'reference' name=ID ('[' (lower=ElementBound '-')? upper=ElementBound ']')?
		//	isOrdered?='ordered'?
		//	isContainer?='container'?
		//	':' type=[Classifier] ('oppositeOf' opposite=[Reference])?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'reference' name=ID ('[' (lower=ElementBound '-')? upper=ElementBound ']')? isOrdered?='ordered'?
		//isContainer?='container'? ':' type=[Classifier] ('oppositeOf' opposite=[Reference])? ';'
		public Group getGroup() { return cGroup; }
		
		//'reference'
		public Keyword getReferenceKeyword_0() { return cReferenceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('[' (lower=ElementBound '-')? upper=ElementBound ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//(lower=ElementBound '-')?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//lower=ElementBound
		public Assignment getLowerAssignment_2_1_0() { return cLowerAssignment_2_1_0; }
		
		//ElementBound
		public RuleCall getLowerElementBoundParserRuleCall_2_1_0_0() { return cLowerElementBoundParserRuleCall_2_1_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2_1_1() { return cHyphenMinusKeyword_2_1_1; }
		
		//upper=ElementBound
		public Assignment getUpperAssignment_2_2() { return cUpperAssignment_2_2; }
		
		//ElementBound
		public RuleCall getUpperElementBoundParserRuleCall_2_2_0() { return cUpperElementBoundParserRuleCall_2_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
		
		//isOrdered?='ordered'?
		public Assignment getIsOrderedAssignment_3() { return cIsOrderedAssignment_3; }
		
		//'ordered'
		public Keyword getIsOrderedOrderedKeyword_3_0() { return cIsOrderedOrderedKeyword_3_0; }
		
		//isContainer?='container'?
		public Assignment getIsContainerAssignment_4() { return cIsContainerAssignment_4; }
		
		//'container'
		public Keyword getIsContainerContainerKeyword_4_0() { return cIsContainerContainerKeyword_4_0; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//type=[Classifier]
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }
		
		//[Classifier]
		public CrossReference getTypeClassifierCrossReference_6_0() { return cTypeClassifierCrossReference_6_0; }
		
		//ID
		public RuleCall getTypeClassifierIDTerminalRuleCall_6_0_1() { return cTypeClassifierIDTerminalRuleCall_6_0_1; }
		
		//('oppositeOf' opposite=[Reference])?
		public Group getGroup_7() { return cGroup_7; }
		
		//'oppositeOf'
		public Keyword getOppositeOfKeyword_7_0() { return cOppositeOfKeyword_7_0; }
		
		//opposite=[Reference]
		public Assignment getOppositeAssignment_7_1() { return cOppositeAssignment_7_1; }
		
		//[Reference]
		public CrossReference getOppositeReferenceCrossReference_7_1_0() { return cOppositeReferenceCrossReference_7_1_0; }
		
		//ID
		public RuleCall getOppositeReferenceIDTerminalRuleCall_7_1_0_1() { return cOppositeReferenceIDTerminalRuleCall_7_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class ElementBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.m2m.km3.xtext.KM3.ElementBound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ElementBound ecore::EIntegerObject: // datatype rule handled by a value converter
		//	'*' | INT
		@Override public ParserRule getRule() { return rule; }
		
		//// datatype rule handled by a value converter
		//'*' | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// datatype rule handled by a value converter
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final PackageElements pPackage;
	private final TerminalRule tCOMMENT;
	private final ModelElementElements pModelElement;
	private final DataTypeElements pDataType;
	private final StructuralFeatureElements pStructuralFeature;
	private final ClassElements pClass;
	private final AttributeElements pAttribute;
	private final ReferenceElements pReference;
	private final ElementBoundElements pElementBound;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KM3GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPackage = new PackageElements();
		this.tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.m2m.km3.xtext.KM3.COMMENT");
		this.pModelElement = new ModelElementElements();
		this.pDataType = new DataTypeElements();
		this.pStructuralFeature = new StructuralFeatureElements();
		this.pClass = new ClassElements();
		this.pAttribute = new AttributeElements();
		this.pReference = new ReferenceElements();
		this.pElementBound = new ElementBoundElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.m2m.km3.xtext.KM3".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Metamodel:
	////	{Metamodel} (contents+=Package)*;
	//Package:
	//	'package' name=ID
	//	'{'
	//	contents+=ModelElement*
	//	'}';
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//terminal COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getCOMMENTRule() {
		return tCOMMENT;
	}
	
	//ModelElement:
	//	DataType | Class
	//	//	Classifier_Impl | Enumeration | EnumLiteral | TemplateParameter | TypedElement_Impl | StructuralFeature_Impl | Attribute | Reference | Operation | Parameter | Package;
	//;
	public ModelElementElements getModelElementAccess() {
		return pModelElement;
	}
	
	public ParserRule getModelElementRule() {
		return getModelElementAccess().getRule();
	}
	
	//DataType:
	//	'datatype' name=ID ';';
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//StructuralFeature:
	//	Attribute | Reference
	//	//	StructuralFeature_Impl;
	//;
	public StructuralFeatureElements getStructuralFeatureAccess() {
		return pStructuralFeature;
	}
	
	public ParserRule getStructuralFeatureRule() {
		return getStructuralFeatureAccess().getRule();
	}
	
	//Class:
	//	isAbstract?='abstract'?
	//	'class' name=ID ('extends' supertypes+=[Class] ("," supertypes+=[Class])*)?
	//	'{' structuralFeatures+=StructuralFeature*
	//	'}';
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Attribute:
	//	isUnique?='unique'?
	//	'attribute' name=ID ('[' (lower=ElementBound '-')? upper=ElementBound ']')?
	//	isOrdered?='ordered'?
	//	':' type=[Classifier]
	//	';';
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Reference:
	//	'reference' name=ID ('[' (lower=ElementBound '-')? upper=ElementBound ']')?
	//	isOrdered?='ordered'?
	//	isContainer?='container'?
	//	':' type=[Classifier] ('oppositeOf' opposite=[Reference])?
	//	';';
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}
	
	//ElementBound ecore::EIntegerObject: // datatype rule handled by a value converter
	//	'*' | INT
	public ElementBoundElements getElementBoundAccess() {
		return pElementBound;
	}
	
	public ParserRule getElementBoundRule() {
		return getElementBoundAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
